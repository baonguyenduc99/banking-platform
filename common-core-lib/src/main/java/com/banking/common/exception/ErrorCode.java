package com.banking.common.exception;

import org.springframework.http.HttpStatus;

public enum ErrorCode {

    GATEWAY_UNAUTHORIZED(HttpStatus.UNAUTHORIZED),
    GATEWAY_TOKEN_EXPIRED(HttpStatus.UNAUTHORIZED),
    GATEWAY_FORBIDDEN(HttpStatus.FORBIDDEN),
    GATEWAY_INVALID_HEADER(HttpStatus.BAD_REQUEST),
    GATEWAY_RATE_LIMIT_EXCEEDED(HttpStatus.TOO_MANY_REQUESTS),
    GATEWAY_CIRCUIT_BREAKER_OPEN(HttpStatus.SERVICE_UNAVAILABLE),

    // === Auth Errors ===
    AUTH_INVALID_CREDENTIALS(HttpStatus.UNAUTHORIZED),
    AUTH_USER_NOT_FOUND(HttpStatus.NOT_FOUND),
    AUTH_TOKEN_REVOKED(HttpStatus.UNAUTHORIZED),
    AUTH_TOKEN_INVALID(HttpStatus.UNAUTHORIZED),
    AUTH_ACCOUNT_LOCKED(HttpStatus.FORBIDDEN),
    AUTH_TOO_MANY_ATTEMPTS(HttpStatus.TOO_MANY_REQUESTS),
    AUTH_MFA_REQUIRED(HttpStatus.UNAUTHORIZED),
    AUTH_PASSWORD_EXPIRED(HttpStatus.FORBIDDEN),
    SECURITY_IP_BLOCKED(HttpStatus.FORBIDDEN),
    AUTH_MFA_INVALID(HttpStatus.UNAUTHORIZED),
    AUTH_TOKEN_EXPIRED(HttpStatus.UNAUTHORIZED),

    ACCOUNT_NOT_FOUND(HttpStatus.NOT_FOUND),
    ACCOUNT_LOCKED(HttpStatus.FORBIDDEN),
    ACCOUNT_BALANCE_INSUFFICIENT(HttpStatus.BAD_REQUEST),
    ACCOUNT_TYPE_INVALID(HttpStatus.BAD_REQUEST),
    ACCOUNT_ALREADY_EXISTS(HttpStatus.CONFLICT),

    TX_LIMIT_EXCEEDED(HttpStatus.BAD_REQUEST),
    DUPLICATE_TX_REQUEST(HttpStatus.CONFLICT),
    TX_INVALID_REFERENCE(HttpStatus.BAD_REQUEST),
    TX_CURRENCY_MISMATCH(HttpStatus.BAD_REQUEST),
    TX_FRAUD_SUSPECTED(HttpStatus.FORBIDDEN),
    TX_REQUIRES_2FA(HttpStatus.UNAUTHORIZED),

    FX_RATE_NOT_FOUND(HttpStatus.NOT_FOUND),
    FX_PAIR_UNSUPPORTED(HttpStatus.BAD_REQUEST),
    FX_AMOUNT_TOO_LOW(HttpStatus.BAD_REQUEST),

    NOTIFY_CHANNEL_UNSUPPORTED(HttpStatus.BAD_REQUEST),
    NOTIFY_DELIVERY_FAILED(HttpStatus.SERVICE_UNAVAILABLE),

    AUDIT_EVENT_FAILED(HttpStatus.INTERNAL_SERVER_ERROR),

    BAD_REQUEST(HttpStatus.BAD_REQUEST),
    VALIDATION_ERROR(HttpStatus.BAD_REQUEST),
    MISSING_REQUIRED_FIELD(HttpStatus.BAD_REQUEST),
    UNSUPPORTED_MEDIA_TYPE(HttpStatus.UNSUPPORTED_MEDIA_TYPE),
    INVALID_DATE_FORMAT(HttpStatus.BAD_REQUEST),

    INTERNAL_ERROR(HttpStatus.INTERNAL_SERVER_ERROR),
    SERVICE_UNAVAILABLE(HttpStatus.SERVICE_UNAVAILABLE),
    DEPENDENCY_FAILURE(HttpStatus.FAILED_DEPENDENCY),
    TIMEOUT_OCCURRED(HttpStatus.GATEWAY_TIMEOUT),

    BUSINESS_RULE_VIOLATION(HttpStatus.UNPROCESSABLE_ENTITY),
    OPERATION_NOT_ALLOWED(HttpStatus.FORBIDDEN),
    DUPLICATE_REQUEST(HttpStatus.CONFLICT),

    JSON_DESERIALIZATION_FAILED(HttpStatus.INTERNAL_SERVER_ERROR),
    JSON_SERIALIZATION_ERROR(HttpStatus.INTERNAL_SERVER_ERROR);

    private final HttpStatus httpStatus;

    ErrorCode(HttpStatus httpStatus) {
        this.httpStatus = httpStatus;
    }

    public String code() {
        return name();
    }

    public HttpStatus httpStatus() {
        return httpStatus;
    }
}
